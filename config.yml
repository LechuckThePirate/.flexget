# My passwords and other private stuff (see https://github.com/tarzasai/.flexget/tree/master/plugins and 
# https://github.com/Flexget/Flexget/pull/249)
secrets: secrets.yml

templates:

  global:
    plugin_priority:
      notify_xmpp: -255
    private_torrents: no
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}
        - \bTS\b: {from: title}
        - \bHS\b: {from: title}
        - \bHDTS\b: {from: title}
        - \bVHS: {from: title}
        - \b3-?D\b: {from: title}
        - \btrailer\b: {from: title}
        - \bscreener\b: {from: title}
        - (\b|\bhd)cam\b: {from: title}
        - \bdual\baudio\b: {from: title}
        - r3mnants: {from: title}
        - italian
        - french
        - german
        - dutch
        - hindi
        - ipod
    verify_ssl_certificates: no
    domain_delay:
      bt-chat.com: 1 seconds
      torrentz.eu: 1 seconds
      torrenticity.com: 1 seconds
    # clean titles from heading urls (someone add garbage like "[ www.whatever.com ]" to torrents names).
    manipulate:
      - title:
          replace:
            regexp: '^([\[ ]*www\.[a-zA-Z\.]*[\] -]*){1,}'
            format: ''
    # A plugin to prevent some messages to be logged (see https://github.com/tarzasai/.flexget/tree/master/plugins).
    log_filter:
      entry:
        - subtitles for now
        - subtitles found for a second-choice
      move:
        - left because it exceeds safety value
        - does not exists (anymore)
      set_series_begin:
        - First episode for
      series:
        - releasing quality restriction

  # The sources for series torrents.
  tvfeed:
    inputs:
      - rss: { url: 'http://kat.torrenticity.com/tv/?rss=1', silent: yes }
      - rss: { url: 'http://torrentz.eu/feed_verified?q=tv', silent: yes }
      - rss: { url: 'http://torrentz.me/feed_verified?q=tv', silent: yes }
      # - rss: { url: 'http://www.torlock.com/television/rss.xml', silent: yes }
      - rss: { url: 'http://rss.bt-chat.com/?group=3', silent: yes }
      - rss: { url: 'http://ezrss.it/feed/', silent: yes }
      - rss: { url: 'http://showrss.info/feeds/all.rss', silent: yes }

  # All the metainfo plugins used by series related tasks.
  tvinfo:
    plugin_priority:
      manipulate: 255
      trakt_lookup: 112
    metainfo_series: yes
    thetvdb_lookup: yes
    trakt_lookup: yes
    # Some titles need little corrections in order to be found on metainfo sites.
    manipulate:
      - title:
          replace:
            regexp: '.*cosmos.a.space[\b-.]?time.odyssey[\b-.]*'
            format: "cosmos_a_spacetime_odyssey."
      - title:
          replace:
            regexp: '.*intelligence.us[\b-.]*'
            format: 'intelligence_2014.'
      - title:
          replace:
            regexp: '.*(marvel|marvels|marvel.s)?.agents.of.(s.h.i.e.l.d.|shield)[\b-.]*'
            format: 'marvels_agents_of_shield.'
      - title:
          replace:
            regexp: '.*resurrection.(us|2014)[\b-.]*'
            format: 'resurrection.'
      - title:
          replace:
            regexp: '.*from.dusk.till.dawn.(the.series)*[\b-.]*'
            format: 'from_dusk_till_dawn.'

  # Global filters for series.
  tvfltr:
    content_size:
      min: 100
      max: 3000
    set:
      allow_teasers: no
      propers: 12 hours

  # Destination path for series in Transmission.
  tvtran:
    transmission:
      path: D:\Media\Stage\series

  # All the metainfo plugins used by movies related tasks.
  mvinfo:
    plugin_priority:
      tmdb_lookup: 128
      rottentomatoes_lookup: 127
    imdb_lookup: yes
    tmdb_lookup: yes
    rottentomatoes_lookup: yes

  # Global filters for movies.
  mvfltr:
    content_size:
      min: 800
      max: 10000
    movie_queue: yes
    quality: 1080p hdtv+

  # Destination path for movies in Transmission.
  mvtran:
    transmission:
      path: D:\Media\Stage\movies

  # Transmission settings.
  transm:
    transmission:
      enabled: yes
      host: 192.168.1.200
      port: 9092
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Sto scaricando:'
      text: '{% if imdb_name|default(False) %}Film: {{ imdb_name }}{% elif series_name|default(False) %}Serie: {{ series_name }} {{ series_id }}{% else %}(?) {{ title }}{% endif %}'

  noseen:
    disable_builtins:
      - seen
      - seen_info_hash
    disable_plugin:
      - seen_movies

  nosumm:
    disable_builtins:
      - details

  nofail:
    disable_builtins:
      - backlog
      - remember_rejected
      - retry_failed
    no_cache: yes

  # Subtitles always follow their videos.
  movsrt:
    move:
      along:
        - srt
        - it.srt
        - ita.srt
        - en.srt
        - eng.srt

  # Common notification settings for news/podcasts.
  xfeeds:
    seen: local
    accept_all: yes
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'News from {{ task.name }}:'
      text: '{{ title }} -- {{ url }}'

tasks:

  # This task check out for ended/cancelled series, to remove them from the main trakt list used to create the series 
  # config file.
  chk_series:
    priority: 1
    interval: 1 days
    template:
      - noseen
      - nofail
    plugin_priority:
      if: -250
      manipulate: -251
      trakt_remove: -252
      trakt_add: -253
    trakt_list:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      custom: tvall
    # We need the tvdb_status field here, but we can't use the tvinfo template because it needs different manipulate 
    # priorities...
    thetvdb_lookup: yes
    if:
      - tvdb_status == 'Ended': accept
    # Plugin trakt_list sets the title fields, but we need its value in the series_name field as required by 
    # trakt_remove/add plugins.
    manipulate:
      - series_name:
          from: title
    trakt_remove:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: tvall
    trakt_add:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: tvended
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Serie terminate/cancellate:'
      text: '{{ tvdb_series_name|default(series_name) }}'

  # This task creates a yaml file with series configuration using two trakt.tv list content (favorites and temporary). 
  # Some options (quality, specials) depends on the show and/or the network and/or my trakt.tv ratings and so.
  set_series:
    priority: 2
    # interval: 50 minutes
    template:
      - noseen
      - nosumm
      - nofail
    plugin_priority:
      set: -254
      if: -255
    inputs:
      # My favorite TV shows...
      - trakt_emit:
          username: '{{ secrets.trakt.usr }}'
          password: '{{ secrets.trakt.pwd }}'
          api_key: '{{ secrets.trakt.api }}'
          position: next
          context: watched
          list: tvall
      # ...and the "I can't decide yet" ones.
      - trakt_emit:
          username: '{{ secrets.trakt.usr }}'
          password: '{{ secrets.trakt.pwd }}'
          api_key: '{{ secrets.trakt.api }}'
          position: next
          context: collected
          list: tvevaluate
    # This will set the trakt_rating/trakt_rating_advanced fields in entries.
    trakt_ratings_lookup:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
    # We need this for the trakt_series_network field.
    trakt_lookup: yes
    # These are the default values.
    set:
      quality: <720p hdtv+
      specials: no
    # overrides:
    if:
      # I just need to rate a show on trakt.tv to switch between hi-res and 
      # default quality.
      - trakt_rating == "love":
          set:
            quality: 720p hdtv+
      # Netflix' stuff usually is webrip source only.
      - trakt_series_network and trakt_series_network == "Netflix":
          set:
            quality: webrip
      # Doctor Who's specials are a very important part of the show.
      - tvdb_id == 78804:
          set:
            specials: yes
    accept_all: yes
    create_series_config:
      set_fields:
        - begin
        - quality
        - specials
      filename: 'C:\\Users\\Administrator\\.flexget\\series.yml'
    # This is probably useless...
    set_series_begin: yes

  # This is the search & download task for series.
  get_series:
    priority: 3
    # interval: 50 minutes
    template:
      - tvinfo
      - tvfeed
      - tvfltr
      - tvtran
      - transm
    include: 'C:\Users\Administrator\.flexget\series.yml'
    seen: local

  # A task to download series pilots.
  premieres:
    priority: 5
    interval: 2 hours
    template:
      - tvfeed
      - tvinfo
      - tvfltr
      - tvtran
      - transm
    plugin_priority:
      if: -252
      friendfeed: -253
      manipulate: -254
      trakt_add: -255
    seen: local
    require_field:
      - tvdb_id
      - tvdb_genres
      - tvdb_first_air_date
    regexp:
      reject:
        - animation: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - documentary: {from: tvdb_genres}
        - family: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
        - musical: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - soap: {from: tvdb_genres}
        - special interest: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
    series_premiere:
      timeframe: 4 hours
      quality: <720p hdtv+
    torrent_alive:
      min_seeds: 40
    if:
      - tvdb_first_air_date and tvdb_first_air_date < now - timedelta(days=60): reject
    # I need to remove season/episode numbers otherwise trakt_add plugin will handle it as a single episode, but I need 
    # it to handle as a series.
    manipulate:
      - series_season:
          remove: yes
      - series_episode:
          remove: yes
    # Send a description to a series-fan channel in a forgotten social network.
    friendfeed:
      username: '{{ secrets.ff.usr }}'
      password: '{{ secrets.ff.pwd }}'
      feeds: [me, serietv]
      text: "{% if tvdb_network|default(False) %}{{ tvdb_network }} {% endif %}#premiere: {{ tvdb_series_name|default(series_name) }} ({{ tvdb_genres|join(', ')|lower() }}){% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name }}{% endif %}"
      link: '{% if trakt_series_url|default(False) %}{{ trakt_series_url }}{% else %}http://thetvdb.com/?tab=series&id={{ tvdb_id }}{% endif %}'
      image: '{% if tvdb_poster_url|default(False) %}{{ tvdb_poster_url }}{% elif tvdb_banner_url|default(False) %}{{ tvdb_banner_url }}{% elif trakt_series_banner_url|default(False) %}{{ trakt_series_banner_url }}{% endif %}'
      comment: '{% if tvdb_overview|default(False) %}{{ tvdb_overview }}{% endif %}'
    # Add the show to the temporary list on trakt.tv so we'll get subsequent episodes too; in the end if I like it I 
    # will move it in the main list.
    trakt_add:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: tvevaluate

  # The IMDB app is the only practical way to send titles to my movie queue from a mobile.
  imdb2trakt:
    priority: 10
    interval: 1 hours
    seen: local
    imdb_list:
      username: '{{ secrets.imdb.usr }}'
      password: '{{ secrets.imdb.pwd }}'
      list: watchlist
    crossmatch:
      # Avoid titles already seen or in my trakt watchlist/collection.
      from:
        - trakt_list:
            username: '{{ secrets.trakt.usr }}'
            api_key: '{{ secrets.trakt.api }}'
            strip_dates: yes
            movies: all
        - trakt_list:
            username: '{{ secrets.trakt.usr }}'
            api_key: '{{ secrets.trakt.api }}'
            strip_dates: yes
            movies: watchlist
      fields:
        - imdb_id
      action: reject
    accept_all: yes
    # My real movies watchlist is on trakt.tv.
    trakt_add:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: watchlist

  # This is a very simple upcoming movies evaluating task, based on IMDB and Rotten Tomatoes public votes.
  rott2trakt:
    priority: 11
    interval: 12 hours
    template:
      - noseen
      - mvinfo
    plugin_priority:
      crossmatch: 0
    rottentomatoes_list:
      dvds:
        - top_rentals
        - current_releases
        - new_releases
        - upcoming
      movies:
        - box_office
        - in_theaters
        - opening
        - upcoming
    require_field:
      - imdb_id
      - imdb_name
      - imdb_year
      - imdb_url
    regexp:
      reject:
        - animation: {from: imdb_genres}
        - documentary: {from: imdb_genres}
        - family: {from: imdb_genres}
        - horror: {from: imdb_genres}
        - music: {from: imdb_genres}
        - musical: {from: imdb_genres}
        - romance: {from: imdb_genres}
        - sport: {from: imdb_genres}
    if:
      # I usually don't like italian movies and I prefer English among all the foreign languages, so...
      - not imdb_languages or not 'english' in imdb_languages: reject
      # We only evaluate recent movies.
      - rt_releases|theater > now - timedelta(months=1): reject
      # Here we have some very simple criterias to try to get only good stuff.
      - rt_critics_consensus is None: reject
      - rt_critics_score >= 90 and imdb_votes >= 5000: accept
      - rt_critics_score >= 50 and imdb_votes >= 50000 and imdb_score >= 7: accept
    crossmatch:
      # Avoid titles already seen or in my trakt watchlist/collection.
      from:
        - trakt_list:
            username: '{{ secrets.trakt.usr }}'
            api_key: '{{ secrets.trakt.api }}'
            strip_dates: yes
            movies: all
        - trakt_list:
            username: '{{ secrets.trakt.usr }}'
            api_key: '{{ secrets.trakt.api }}'
            strip_dates: yes
            movies: watchlist
      fields:
        - imdb_id
        - tmdb_id
      action: reject
    # Again we add the accepted entries to the trakt.tv watchlist.
    trakt_add:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: watchlist
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Da Rotten Tomatoes:'
      text: '{{ imdb_name }} ({{ imdb_year }}) - {{ imdb_url }}'

  # In the end we transfer the trakt watchlist content to the flexget movie queue.
  watchlist:
    priority: 12
    interval: 1 hours
    seen: local
    trakt_list:
      username: '{{ secrets.trakt.usr }}'
      api_key: '{{ secrets.trakt.api }}'
      movies: watchlist
    accept_all: yes
    queue_movies:
      quality: any

  # This is the real search & download task for movies.
  get_movies:
    priority: 15
    interval: 2 hours
    template:
      - mvfltr
      - mvtran
      - transm
    seen: local
    discover:
      what:
        - emit_movie_queue: { year: no }
      from:
        - kat:
            category: movies
            verified: yes
        - torrentz: verified
      interval: 0 hour

  # sometimes, mostly for old stuff, I have to look for episodes in the old way.
  dropbox_series:
    priority: 30
    template:
      - noseen
      - nosumm
      - nofail
      - tvinfo
      - tvtran
      - transm
    find:
      path:
        - D:\Dropbox\Torrents\series
      regexp: '.*\.torrent$'
    accept_all: yes
    exec:
      on_output:
        for_accepted: del "{{location}}"

  # (movies too)
  dropbox_movies:
    priority: 31
    template:
      - noseen
      - nosumm
      - nofail
      - mvinfo
      - mvtran
      - transm
    find:
      path:
        - D:\Dropbox\Torrents\movies
      regexp: '.*\.torrent$'
    accept_all: yes
    exec:
      on_output:
        for_accepted: del "{{location}}"

  # Move episodes to incoming folder.
  move_series:
    priority: 40
    template:
      - noseen
      - nosumm
      - tvinfo
      - movsrt
    find:
      path:
        - D:\Media\Stage\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    crossmatch:
      from:
        - from_transmission:
            host: 192.168.1.200
            port: 9092
            enabled: yes
            onlycomplete: yes
      fields:
        - location
      action: accept
    move:
      to: "D:\\Media\\Incoming\\series\\{{ tvdb_series_name|default(series_name) }}\\"
      clean_source: 50
    # Add episodes to my collection on trakt.tv and send me a message.
    trakt_add:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: library
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Nuovi episodi:'
      text: '{{ tvdb_series_name|default(series_name) }} {{ tvdb_ep_id|default(series_id) }}{% if tvdb_ep_name|default(False) %}: {{ tvdb_ep_name }}{% endif %}'
    exec:
      allow_background: yes
      on_exit:
        phase: md D:\Media\Stage\series

  # Move movies to incoming folder.
  move_movies:
    priority: 41
    template:
      - noseen
      - nosumm
      - mvinfo
      - movsrt
    find:
      path:
        - D:\Media\Stage\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    crossmatch:
      from:
        - from_transmission:
            host: 192.168.1.200
            port: 9092
            enabled: yes
            onlycomplete: yes
      fields:
        - location
      action: accept
    require_field:
      - imdb_year
    move:
      to: "D:\\Media\\Incoming\\movies\\{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})\\"
      clean_source: 50
    # Remove movies from my trakt watchlist, add to the collection and send me a message.
    trakt_remove:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: watchlist
    trakt_add:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      list: library
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Nuovi film:'
      text: '{{ imdb_name }} ({{ imdb_year }})'
    exec:
      allow_background: yes
      on_exit:
        phase: md D:\Media\Stage\movies

  # Clean Transmission of completed torrents.
  cleantran:
    priority: 45
    template:
      - noseen
      - nosumm
      - nofail
    clean_transmission:
      enabled: yes
      host: 192.168.1.200
      port: 9092
      finished_for: 4 hours

  # Download italian and english subtitles for all the videos.
  subtitles:
    priority: 60
    template:
      - noseen
      - nosumm
      - nofail
    find:
      path:
        - D:\Media\Incoming
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    subliminal:
      languages:
        - ita
      alternatives:
        - eng

  # Move watched episodes out of the incoming folder.
  purge_series:
    priority: 70
    template:
      - no_global
      - noseen
      - nosumm
      - tvinfo
      - movsrt
    find:
      path:
        - D:\Media\Incoming\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    trakt_watched_lookup:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
    if:
      - trakt_watched: accept
    move:
      to: "D:\\Media\\Purge\\{{ tvdb_series_name|default(series_name) }}"
      clean_source: 10
    exec:
      allow_background: yes
      on_exit:
        phase: md D:\Media\Incoming\series

  # Move watched movies out of the incoming folder.
  purge_movies:
    priority: 71
    template:
      - no_global
      - noseen
      - nosumm
      - mvinfo
      - movsrt
    find:
      path:
        - D:\Media\Incoming\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    crossmatch:
      from:
        - trakt_list:
            username: '{{ secrets.trakt.usr }}'
            password: '{{ secrets.trakt.pwd }}'
            api_key: '{{ secrets.trakt.api }}'
            movies: watched
            strip_dates: yes
      fields:
        - imdb_id
      action: accept
    move:
      to: "D:\\Media\\Purge\\{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})"
      clean_source: 10
    exec:
      allow_background: yes
      on_exit:
        phase: md D:\Media\Incoming\movies

  # Generate a local html index page for available episodes.
  poster_series:
    priority: 80
    template:
      - no_global
      - noseen
      - nosumm
      - tvinfo
      - nofail
    find:
      path:
        - D:\Media\Incoming\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    check_subtitles: yes
    accept_all: yes
    make_html:
      template: series.template
      file: 'D:\Media\Incoming\series.html'

  # Generate a local html index page for available movies.
  poster_movies:
    priority: 81
    template:
      - no_global
      - noseen
      - nosumm
      - mvinfo
      - nofail
    find:
      path:
        - D:\Media\Incoming\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    check_subtitles: yes
    accept_all: yes
    make_html:
      template: movies.template
      file: 'D:\Media\Incoming\movies.html'

  # This task send me a notification for every APC warning logged in Windows registry (power issues at my place).
  events:
    priority: 200
    # interval: 50 minutes
    seen: local
    # My input plugin for Windows registry (see https://github.com/tarzasai/.flexget/tree/master/plugins)
    winevents:
      filename: c:\windows\sysnative\winevt\logs\Application.evtx
      providers:
        - APC UPS Service:
            short: UPS
            events:
              - 61452: Test automatico riuscito
              - 61453: Sistema alimentato a batteria per disturbo elettrico
              - 173: Sistema alimentato a batteria per sottotensione
              - 174: Sistema alimentato a batteria per blackout
              - 61455: Alimentazione ripristinata a corrente di rete
              - 61456: PowerChute non comunica con la batteria di backup
              - 61465: PowerChute comunica di nuovo con la batteria di backup
              - 176: PowerChute ha spento il sistema
    accept_all: yes
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Eventi di sistema:'
      text: "{{ event_time.strftime('%H:%M:%S') }} - {{ short_name }}: {{ event_text }}"

  ###################
  # NEWS & PODCASTS:
  #################

  Flexget:
    priority: 500
    interval: 2 hours
    template:
      xfeeds
    inputs:
      - rss: { url: 'http://flexget.com/report/1?sort=created&asc=0&page=1&format=rss', silent: yes, all_entries: no }

  Imogen Heap:
    priority: 501
    interval: 12 hours
    template:
      xfeeds
    inputs:
      - rss: { url: 'http://www.imogenheap.com/feed/', silent: yes, all_entries: no }
      - rss: { url: 'http://blog.imogenheap.com/rss', silent: yes, all_entries: no }

  Podcasts:
    priority: 502
    interval: 12 hours
    template:
      xfeeds
    inputs:
      - rss: { url: 'http://feeds.feedburner.com/Radionation', silent: yes, all_entries: no }

  Dilbert:
    priority: 503
    interval: 12 hours
    template:
      xfeeds
    inputs:
      - rss: { url: 'http://feed.dilbert.com/dilbert/daily_strip', silent: yes, all_entries: no }
    dilbert_strip: yes

  Zerocalcare:
    priority: 504
    interval: 12 hours
    template:
      xfeeds
    inputs:
      - rss: { url: 'http://feeds.feedburner.com/Zerocalcareit?format=xml', silent: yes, all_entries: no }

  Romantically Apocalyptic:
    priority: 505
    interval: 12 hours
    template:
      xfeeds
    inputs:
      - rss: { url: 'http://feeds.feedburner.com/zeefeed?format=xml', silent: yes, all_entries: no }

  FrenfiComms:
    priority: 510
    interval: 1 hours
    getffcomms:
      username: '{{ secrets.ff.usr }}'
      password: '{{ secrets.ff.pwd }}'
      posts:
        - e-f1e550600ce349cc90271b3284bb22c3
    seen: local
    accept_all: yes
    notify_xmpp:
      sender: '{{ secrets.xmpp.usr }}'
      password: '{{ secrets.xmpp.pwd }}'
      recipient: '{{ secrets.xmpp.dst }}'
      title: 'Nuovi commenti da frenfi:'
      text: '- {{ comment_body }}  ({{ comment_author }} su "{{ post_title }}")'

  tvrencans:
    priority: 515
    interval: 7 days
    plugin_priority:
      if: -255
    tvrage_rencans: 3
    seen: local
    if:
      - tvrsu_date >= now - timedelta(days=8): accept
    friendfeed:
      username: '{{ secrets.ff.usr }}'
      password: '{{ secrets.ff.pwd }}'
      feeds: [me, serietv]
      mode: comments
      text: "TV #rencans: weekly status update"
      link: 'http://www.tvrage.com/status_update.php'
      comment: "{{ tvrsu_date.strftime('%d/%m') }}: {{ tvrsu_lines|join(' -- ') }}"

  ################
  # MANUAL TASKS:
  ##############
  
  begin_series:
    manual: yes
    template:
      - noseen
      - nosumm
      - nofail
    trakt_emit:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      api_key: '{{ secrets.trakt.api }}'
      position: next
      context: watched
      list: tvall
    accept_all: yes
    set_series_begin: yes
