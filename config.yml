# My passwords and other private stuff.
variables: secrets.yml

templates:

  global:
    # private_torrents: no
    regexp:
      reject:
        - \bemporada\b: {from: title}
        - \bsubt\b: {from: title}
        - (s|d)ub(s|bed|lado)?\b: {from: title}
        - \bH?D?TS\b: {from: title}
        - \bVHS: {from: title}
        - \b3-?D\b: {from: title}
        - \btrailer\b: {from: title}
        - \bscreener\b: {from: title}
        - \b(hd)?cam(rip)?\b: {from: title}
        - \bdual\baudio\b: {from: title}
        - r3mnants: {from: title}
        - \bKOR\b: {from: title}
        - italian
        - french
        - german
        - dutch
        - hindi
        - ipod
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
      reject:
        - 'password.txt'
        - '*.wmv'
        # - '*.r01'
      require_mainfile: yes
    verify_ssl_certificates: no
    domain_delay:
      bt-chat.com: 1 seconds
      ezrss.it: 1 seconds
      showrss.info: 1 seconds
      torlock.eu: 1 seconds
      torrenticity.com: 1 seconds
    # Prevent some messages to be logged - see https://github.com/tarzasai/.flexget/tree/master/plugins
    log_filter:
      content_size:
        - too big, rejecting
        - too small, rejecting
      crossmatch:
        - filesystem did not return anything
      guessit.guess:
        - duplicate properties
        - both guesses to be merged
      manager:
        - Writing crash report to
      move:
        - left because it exceeds safety value
        - does not exists (anymore)
      parser_internal:
        - appears to be an episode pack
      requests.packages.urllib3.connectionpool:
        - error(10060
        - feed
        - torlock
        - getaddrinfo failed
        - ReadTimeoutError
        - after connection broken
      series:
        - releasing quality restriction
        - appears to be an episode pack
      task:
        - Plugin content_size has requested task to be ran again
        - Rerunning the task in case better resolution
        - Unhandled error in plugin from_transmission
        - Unhandled error in plugin clean_transmission
      uoccin_process:
        - changes in C
      urlrewriter:
        - URL rewritten to
    # torrentz' guys banned flexget users
    headers:
      User-Agent: "Mozilla/5.0 (Windows NT 5.1; rv:16.0) Gecko/20100101 Firefox/16.0"

  # The sources for series torrents.
  tvfeed:
    inputs:
      - rss:
          url: '{? privs.worldofp2p_tv ?}'
          silent: yes
      - rss:
          url: http://showrss.info/user/83874.rss?magnets=true&namespaces=true&name=null&quality=any&re=yes
          silent: yes
      - rss:
          # ### check domain at https://eztvstatus.com/ ###
          url: https://eztv.ag/ezrss.xml
          other_fields: ['torrent:magnetURI']
          link: 'torrent:magnetURI'
          silent: yes
      - rss:
          url: http://thepiratebay.org/rss/top100/205
          silent: yes
      - rss:
          url: http://extratorrent.cc/rss.xml?cid=8
          silent: yes
      - rss:
          url: http://www.torrentfunk.com/tv/rss.xml
          silent: yes
      - rss:
          url: https://extratorrent.cc/rss.xml?type=search&search=white+rabbit+project
          silent: yes
      - rss:
          url: https://extratorrent.cc/rss.xml?type=search&search=gangland+undercover
          silent: yes
    log_filter:
      inputs:
        - Error during input plugin rss
      rss:
        - I have saved the invalid content
        - Received content looks

  # All the metainfo plugins used by tasks handling series.
  tvinfo:
    plugin_priority:
      # manipulate must fix the titles before metainfo_series.
      manipulate: 255
    metainfo_series: yes
    thetvdb_lookup: yes
    uoccin_lookup: '{? uoccin.path ?}'
    log_filter:
      api_tvdb:
        - using cached data
        - not get update information from
      manipulate:
        - tvinfo_title
      parser_internal:
        - cannot find a(n) `ep` style identifier
        - cannot find any series numbering
    # Some titles need little corrections to find matches on metainfo sites.
    manipulate:
      - title:
          replace:
            regexp: '^\[[^\]]*\][^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^{[^\]]*}[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^\([^\]]*\)[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '\s?\]\[\s?'
            format: '@@'
      - title:
          replace:
            regexp: '\W?@@.*'
            format: ''
      # Original title backup
      - tvinfo_title:
          from: title
      # Now the modifications
      - title:
          replace:
            regexp: '^Startup\.(2016)?'
            format: 'Startup.'

  # Global filters for series.
  tvfltr:
    log_filter:
      series:
        - identified_by has locked
      remember_rej:
        - Remembering rejection of
      remember_rejected:
        - Remembering rejection of
    # content_size:
      # min: 100
      # max: 3000
    set:
      allow_teasers: no
      propers: 12 hours
      specials: no
      tracking: backfill

  # Destination path for series in Transmission (requires "transm" template too).
  tvtran:
    transmission:
      path: C:\Users\giorgio\Videos\Stage\series

  # The sources for movies torrents.
  mvfeed:
    inputs:
      - rss: { url: '{? privs.worldofp2p_mv ?}', silent: yes }
      - rss: { url: 'https://thepiratebay.org/rss/top100/201', silent: yes }
      - rss: { url: 'http://extratorrent.cc/rss.xml?cid=4', silent: yes }
      - rss: { url: 'http://www.torlock.com/movies/rss.xml', silent: yes }
    log_filter:
      inputs:
        - Unable to download the RSS for task
        - invalid RSS content
        - rss did not return
      rss:
        - I have saved the invalid content
        - like error page
        - login page

  # All the metainfo plugins used by tasks handling movies.
  mvinfo:
    # plugin_priority:
      # I'm not sure of these priorities too, maybe because of https://github.com/Flexget/Flexget/pull/234 (fixed).
      # tmdb_lookup: 128
    log_filter:
      imdb_lookup:
        - lookup failed
      tmdb_lookup:
        - lookup failed
    imdb_lookup: yes
    # tmdb_lookup: yes
    uoccin_lookup: '{? uoccin.path ?}'

  # Global filters for movies.
  mvfltr:
    content_size:
      min: 800
      max: 15000
    quality: 1080p
    if:
      - not (imdb_id and imdb_name and imdb_year): reject
      - uoccin_watched: reject

  # Destination path for movies in Transmission (requires transm template too).
  mvtran:
    transmission:
      path: C:\Users\giorgio\Videos\Stage\movies

  # Common Transmission settings.
  transm:
    transmission:
      enabled: yes
      port: 9091
      ratio: -1
      magnetization_timeout: 90
    log_filter:
      transmissionrpc:
        - Expecting
        - Request
        - HTTP data

  # Subtitles should always follow their video.
  movsrt:
    move:
      along:
        extensions:
          - srt
          - it.srt
          - ita.srt
          - en.srt
          - eng.srt
  copsrt:
    copy:
      along:
        extensions:
          - srt
          - it.srt
          - ita.srt
          - en.srt
          - eng.srt
  delsrt:
    delete:
      clean_source: 50
      along:
        extensions:
          - srt
          - it.srt
          - ita.srt
          - en.srt
          - eng.srt

  # No messages about no input/output/whatever.
  nosumm:
    disable:
      - details

  # Several tasks must not mess up with the seen table...
  noseen:
    disable:
      - seen
      - seen_info_hash
      - seen_movies

  # ...and/or with the backlog.
  nofail:
    disable:
      - backlog
      - remember_rejected
      - retry_failed

tasks:

  # Synchronize the local uoccin.json file with updates from my Android app.
  # the app: https://play.google.com/store/apps/details?id=net.ggelardi.uoccin
  # how to use it with Flexget: https://github.com/Flexget/Flexget/pull/506
  uoccin_sync:
    priority: 1
    template:
      - nosumm
      - nofail
    seen: local
    filesystem:
      path:
        - '{? uoccin.path ?}\device.{? uoccin.uuid ?}'
      regexp: '.*\.diff$'
    accept_all: yes
    uoccin_reader:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'

  # This is the download task for series.
  get_series:
    priority: 3
    interval: 4 hours
    template:
      - tvinfo
      - tvfeed
      - tvfltr
      - tvtran
      - transm
    seen: local
    sequence:
      - configure_series:
          settings:
            tracking: backfill
            quality: 720p hdtv+
          from:
            uoccin_emit:
              path: '{? uoccin.path ?}'
              type: series
              tags: [ 'hires' ]
      - configure_series:
          settings:
            tracking: backfill
            quality: <720p hdtv+
          from:
            uoccin_emit:
              path: '{? uoccin.path ?}'
              type: series
              tags: [ 'hires', 'netflix', 'no' ]
              check_tags: none
      - configure_series:
          settings:
            tracking: backfill
            quality: webrip
          from:
            uoccin_emit:
              path: '{? uoccin.path ?}'
              type: series
              tags: [ 'netflix' ]
    if:
      - uoccin_watched: reject
    transmission:
      bandwidth_priority: 1

  # This one grabs the pilots.
  premieres:
    priority: 5
    interval: 12 hours
    template:
      - tvfeed
      - tvinfo
      - tvfltr
      - tvtran
      - transm
    seen: local
    require_field:
      - tvdb_id
      - tvdb_genres
      - tvdb_series_name
      - tvdb_first_air_date
    regexp:
      reject:
        - animation: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - documentary: {from: tvdb_genres}
        - family: {from: tvdb_genres}
        - food: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
        - mini-series: {from: tvdb_genres}
        - musical: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - romance: {from: tvdb_genres}
        - soap: {from: tvdb_genres}
        - special interest: {from: tvdb_genres}
        - sport: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
        - travel: {from: tvdb_genres}
    series_premiere:
      timeframe: 4 hours
      allow_teasers: no
    torrent_alive:
      min_seeds: 40
    if:
      - not tvdb_id: reject
      - uoccin_tags or uoccin_watchlist or uoccin_watched or uoccin_collected: reject
      - tvdb_first_air_date and tvdb_first_air_date < now - timedelta(days=60): reject
      - tvdb_genres == ['comedy'] or tvdb_genres == ['Comedy']: reject
    # Unknown series are less important.
    transmission:
      bandwidth_priority: -1
    # uoccin_watchlist_add:
      # uuid: '{? uoccin.uuid ?}'
      # path: '{? uoccin.path ?}'
      # tags: [ 'evaluate' ]

  # Acquire movie titles from my IMDB list
  imdb2uoccin:
    priority: 9
    interval: 12 hours
    template:
      - nofail
      - mvinfo
    seen: local
    imdb_watchlist:
      user_id: '{? imdb.uid ?}'
      list: watchlist
      force_language: en-us
    if:
      - not imdb_id: reject
      - uoccin_tags or uoccin_watchlist or uoccin_watched or uoccin_collected: reject
    accept_all: yes
    uoccin_watchlist_add:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
      tags: [ 'imdb' ]

  # Copy movies from Uoccin watchlist to Flexget movie queue.
  queue_movies:
    priority: 10
    interval: 4 hours
    template:
      - nofail
    seen: local
    uoccin_emit:
      path: '{? uoccin.path ?}'
      type: movies
    accept_all: yes
    list_add:
      - movie_list: mqueue

  # Re-queue unwatchable movies (bad quality, on-screen subs, etc)
  requeue_movies:
    priority: 11
    template:
      - noseen
      - nosumm
      - nofail
      - mvinfo
      - delsrt
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\.requeue
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    list_add:
      - movie_list: mqueue
    uoccin_collection_remove:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    uoccin_watchlist_add:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
      tags: [ 'requeued' ]
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Users\giorgio\Videos\Incoming\.requeue

  # This is the search & download task for movies.
  get_movies:
    priority: 15
    interval: 12 hours
    template:
      - mvinfo
      - mvfeed
      - mvfltr
      - mvtran
      - transm
    seen: local
    list_match:
      from:
        - movie_list: mqueue
    transmission:
      bandwidth_priority: 0

  # Sometimes, mostly for old stuff, I have to look for episodes in the old way: this task look for torrents in my
  # g-drive folder for series and send them directly to Transmission.
  dropbox_series:
    priority: 30
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - tvinfo
      - tvtran
      - transm
    filesystem:
      path:
        - C:\Users\giorgio\Google Drive\torrents\series
      regexp: '.*\.torrent$'
    accept_all: yes
    transmission:
      bandwidth_priority: 1
    exec:
      on_output:
        for_accepted: del "{{ location }}"

  # Same as the prior task, this time for movies.
  dropbox_movies:
    priority: 31
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - mvinfo
      - mvtran
      - transm
    filesystem:
      path:
        - C:\Users\giorgio\Google Drive\torrents\movies
      regexp: '.*\.torrent$'
    accept_all: yes
    transmission:
      bandwidth_priority: 0
    exec:
      on_output:
        for_accepted: del "{{ location }}"

  # Move episodes from Transmission destination folder to the incoming folder.
  move_series:
    priority: 40
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - tvinfo
      - copsrt
    log_filter:
      crossmatch:
        - did not return anything
    manipulate:
      - location:
          from: bigfile_location
    #   - title:
    #       replace:
    #         regexp: '.*from.dusk.till.dawn.(the.series)*[\b-.]*'
    #         format: 'From Dusk Till Dawn '
    #   - title:
    #       replace:
    #         regexp: '^[^a-z0-9]*turn:?.(washington(.)?s.spies)?[^a-z0-9]*'
    #         format: 'Turn '
    #   - title:
    #       replace:
    #         regexp: '^The\.Night\.Of\.Part\.'
    #         format: 'The.Night.Of.S01E0'
    require_field:
      - transmission_progress
      - bigfile_location
      - tvdb_id
      - tvdb_series_name
    # We get the entries from Transmission because we need the torrent title, because in some multi-file torrents the
    # actual video filename is completely different, up to make the lookup on metainfo sites impossible.
    my_from_transmission:
      enabled: yes
      port: 9091
      only_complete: no
    # Accept only files in series' Transmission destination path (tasks get_series, premieres, dropox_series).
    crossmatch:
      from:
        - filesystem:
            path:
              - C:\Users\giorgio\Videos\Stage\series
            regexp: '.*\.(mkv|mp4)$'
            recursive: yes
      fields:
        - location
      action: accept
    exists_series:
      path: "C:\\Users\\giorgio\\Videos\\Incoming\\series"
      allow_different_qualities: better
    if:
      - transmission_progress < 100: reject
      - not proper and (uoccin_collected or uoccin_watched): reject
    # Copy accepted files in the incoming path (filename will be the original title since manipulate in tvinfo might
    # have modified it).
    copy:
      to: "C:\\Users\\giorgio\\Videos\\Incoming\\series\\{{ tvdb_series_name|default(series_name) }}\\"
      rename: "{{ tvinfo_title }}{% if not location|pathext in tvinfo_title %}{{ location|pathext }}{% endif %}"
    # Add to Uoccin episodes collection.
    uoccin_collection_add:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'

  # Move movies from Transmission destination folder to the incoming folder.
  move_movies:
    priority: 41
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - mvinfo
      - copsrt
    log_filter:
      crossmatch:
        - did not return anything
    manipulate:
      - location:
          from: bigfile_location
    require_field:
      - transmission_progress
      - bigfile_location
    # We get the entries from Transmission because we need the torrent title, because in some multi-file torrents the
    # actual video filename is completely different, up to make the lookup on metainfo sites impossible.
    my_from_transmission:
      enabled: yes
      port: 9091
      only_complete: no
    # Accept only files in movies' Transmission destination path (tasks get_movies, dropox_movies).
    crossmatch:
      from:
        - filesystem:
            path:
              - C:\Users\giorgio\Videos\Stage\movies
            regexp: '.*\.(avi|mkv|mp4)$'
            recursive: yes
      fields:
        - location
      action: accept
    if:
      - transmission_progress < 100: reject
      - uoccin_watched: reject
    # Copy accepted files in the incoming path (filename will be the original torrent name, see move_series).
    copy:
      to: "C:\\Users\\giorgio\\Videos\\Incoming\\movies\\{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})\\"
      rename: "{{ title }}{% if not location|pathext in title %}{{ location|pathext }}{% endif %}"
    # Update Uoccin movies collection/watchlist.
    uoccin_collection_add:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    uoccin_watchlist_remove:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    # 
    list_remove:
      - movie_list: mqueue

  # Clean Transmission of completed torrents.
  cleantran:
    priority: 45
    template:
      - noseen
      - nosumm
      - nofail
    log_filter:
      transmissionrpc:
        - Expecting
        - Request
        - HTTP data
      task:
        - you should add (at least) one!
    clean_transmission:
      enabled: yes
      port: 9091
      finished_for: 48 hours
      delete_files: yes

  # Move watched episodes out of the incoming folder.
  purge_series:
    priority: 50
    template:
      - no_global
      - noseen
      - nosumm
      - tvinfo
      - delsrt
    log_filter:
      delete:
        - has been deleted as well
        - left because it exceeds safety value
        - was less than clean_source safe value
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - uoccin_tags and 'no' in uoccin_tags: accept
      - uoccin_watched and uoccin_rating <= 4: accept
    uoccin_collection_remove:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    # Eventually restore the incoming series folder (otherwise Flexget will not run next time).
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Users\giorgio\Videos\Incoming\series

  save_series:
    priority: 51
    template:
      - no_global
      - noseen
      - nosumm
      - tvinfo
      - movsrt
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - uoccin_watched and uoccin_rating > 4: accept
    move:
      to: "C:\\Users\\giorgio\\Videos\\Series\\{{ tvdb_series_name|default(series_name) }}\\Season {{ series_season }}\\"
      clean_source: 10
    uoccin_collection_remove:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    # Eventually restore the incoming series folder (otherwise Flexget will not run next time).
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Users\giorgio\Videos\Incoming\series

  # Delete watched movies.
  purge_movies:
    priority: 52
    template:
      - no_global
      - noseen
      - nosumm
      - mvinfo
      - delsrt
    log_filter:
      delete:
        - has been deleted as well
        - left because it exceeds safety value
        - was less than clean_source safe value
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - uoccin_watched and uoccin_rating <= 4: accept
    uoccin_collection_remove:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    # Eventually restore the incoming movies folder (otherwise Flexget will not run next time).
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Users\giorgio\Videos\Incoming\movies

  # Download italian and english subtitles for episodes.
  subs_series:
    priority: 60
    template:
      - noseen
      - nosumm
      - nofail
      - tvinfo
    plugin_priority:
      subliminal: -200
      mysubliminal: -200
      uoccin_subtitles: -201
    log_filter:
      entry:
        - not found
        - subtitles for now
        - found for a second-choice
      fix_subtitles:
        - fixed
      subtitles:
        - Name computed for
        - found for a second-choice
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    mysubliminal:
      single: no
      languages:
        - ita
      alternatives:
        - eng
    # Updates the Uoccin collection with subs data.
    uoccin_subtitles:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    # fix wrong accented characters in italian subs - see https://github.com/tarzasai/.flexget/tree/master/plugins
    # fix_subtitles: yes

  # Download italian and english subtitles for movies.
  subs_movies:
    priority: 61
    # interval: 2 hours
    template:
      - noseen
      - nosumm
      - nofail
      - mvinfo
    plugin_priority:
      subliminal: -200
      mysubliminal: -200
      uoccin_subtitles: -201
    log_filter:
      entry:
        - not found
        - subtitles for now
        - found for a second-choice
      fix_subtitles:
        - fixed
      subtitles:
        - Name computed for
        - found for a second-choice
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    mysubliminal:
      single: no
      languages:
        - ita
      alternatives:
        - eng
    # Updates the Uoccin collection with subs data.
    uoccin_subtitles:
      uuid: '{? uoccin.uuid ?}'
      path: '{? uoccin.path ?}'
    # fix wrong accented characters in italian subs - see https://github.com/tarzasai/.flexget/tree/master/plugins
    # fix_subtitles: yes

  ######################################################################################################################
  # CLEANUPS (DANGER!!!)
  ######################################################################################################################

  clean_series:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
    series_list: yes
    crossmatch:
      from:
        - uoccin_emit:
            path: '{? uoccin.path ?}'
            type: series
      fields:
        - title
      action: reject
    accept_all: yes
    forget_series: yes

  clean_episodes:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - tvinfo
    episodes_list: yes
    # episodes_list: 'dreadful'
    if:
      - series_season == 1 and series_episode == 1: reject
      - not tvdb_id: accept
      - not tvdb_ep_air_date or tvdb_ep_air_date > now - timedelta(days=1): accept
    forget_episodes: yes

  ######################################################################################################################
  # TESTS
  ######################################################################################################################

  ut1:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
    imdb_lookup: yes
    uoccin_lookup: '{? uoccin.path ?}'
    mock:
      # - { title: 'fury' }
      - { title: 'penny dreadful s01e03' }
      # - { title: 'life of pi 1080p whatever' }

  ut2:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
    imdb_lookup: yes
    # tmdb_lookup: yes
    mock:
      - { title: 'The.Jungle.Book.2016.MULTi.1080p.BluRay.x264-LOST' }
      # - { title: '' }
      # - { title: '' }
      # - { title: '' }

  ut3:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - tvinfo
    # metainfo_series: yes
    # thetvdb_lookup: yes
    mock:
      - { title: 'SIX.Part.5.HDTV.x264-FLEET[rarbg]' }
    accept_all: yes
    # uoccin_collection_remove:
      # uuid: '{? uoccin.uuid ?}'
      # path: '{? uoccin.path ?}'
    # uoccin_watchlist_add:
      # uuid: '{? uoccin.uuid ?}'
      # path: '{? uoccin.path ?}'
      # tags: [ 'evaluate' ]

  ut4:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - mvinfo
    mock:
      - { title: 'Sisters.2015.1080p.BluRay.H264.AAC-RARBG' }
    quality: 1080p
    require_field:
      - imdb_id
      - imdb_name
      - imdb_year
      - imdb_url
      - imdb_languages
      - imdb_genres
      - imdb_score
      - imdb_votes
    regexp:
      reject:
        - animation: {from: imdb_genres}
        - documentary: {from: imdb_genres}
        - family: {from: imdb_genres}
        - horror: {from: imdb_genres}
        - music: {from: imdb_genres}
        - musical: {from: imdb_genres}
        - romance: {from: imdb_genres}
        - sport: {from: imdb_genres}
    if:
      - uoccin_watchlist or uoccin_watched or uoccin_collected: reject
      - not imdb_languages or not 'english' in imdb_languages: reject
      - not imdb_votes or imdb_votes < 10000: reject
      - not imdb_score or imdb_score < 8.5: reject
      - imdb_genres == ['comedy']: reject
      - imdb_year < now.year - 10: reject
    accept_all: yes
    
  ut5:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
    filesystem:
      path:
        - C:\Users\giorgio\Videos\Incoming\series
        # - C:\Users\giorgio\Videos\Incoming\series\Aquarius (2015)
        # - C:\Users\giorgio\Videos\Incoming\series\From Dusk Till Dawn The Series
        # - C:\Users\giorgio\Videos\Incoming\series\test
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    mysubliminal:
      single: no
      languages:
        - ita
        # - eng
      alternatives:
        - eng
        
  ut6:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
    mock:
      - { title: 'Shooter.S01E02.HDTV.x264-FLEET[PRiME]', location: 'C:\Users\giorgio\Videos\Incoming\series\Shooter\Shooter.S01E02.HDTV.x264-FLEET[PRiME].mkv' }
    accept_all: yes
    fix_subtitles: yes
        
  ut7:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - mvinfo
    accept_all: yes
    discover:
      what:
        - movie_list: mqueue
      from:
        - extratorrent_cc:
            category: all
