# My passwords and other private stuff.
secrets: secrets.yml

templates:

  global:
    # plugin_priority:
      # notify_xmpp: -255
    disable:
      - notify_xmpp
    private_torrents: no
    regexp:
      reject:
        - \btemporada\b: {from: title}
        - \bsubt\b: {from: title}
        - (s|d)ub(s|bed|lado)?\b: {from: title}
        - \bTS\b: {from: title}
        - \bHS\b: {from: title}
        - \bHDTS\b: {from: title}
        - \bVHS: {from: title}
        - \b3-?D\b: {from: title}
        - \btrailer\b: {from: title}
        - \bscreener\b: {from: title}
        - \b(hd)?cam(rip)?\b: {from: title}
        - \bdual\baudio\b: {from: title}
        - r3mnants: {from: title}
        - italian
        - french
        - german
        - dutch
        - hindi
        - ipod
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
      reject:
        - 'password.txt'
        - '*.wmv'
        # - '*.r01'
      require_mainfile: yes
    verify_ssl_certificates: no
    domain_delay:
      bt-chat.com: 1 seconds
      ezrss.it: 1 seconds
      showrss.info: 1 seconds
      torlock.eu: 1 seconds
      torrenticity.com: 1 seconds
      torrentz.eu: 1 seconds
      torrentz.me: 1 seconds
    # Prevent some messages to be logged - see https://github.com/tarzasai/.flexget/tree/master/plugins
    log_filter:
      content_size:
        - too big, rejecting
        - too small, rejecting
      manager:
        - Writing crash report to
      move:
        - left because it exceeds safety value
        - does not exists (anymore)
      requests.packages.urllib3.connectionpool:
        - error(10060
        - feed
        - torlock
        - getaddrinfo failed
        - ReadTimeoutError
        - after connection broken
      series:
        - releasing quality restriction
        - appears to be an episode pack
      task:
        - Unhandled error in plugin from_transmission
        - Unhandled error in plugin clean_transmission
      torrentz:
        - Too Many Requests
      urlrewriter:
        - URL rewritten to
    # torrentz' guys banned flexget users
    headers:
      User-Agent: "Mozilla/5.0 (Windows NT 5.1; rv:16.0) Gecko/20100101 Firefox/16.0"

  # The sources for series torrents.
  tvfeed:
    inputs:
      - rss: { url: 'http://kat.torrenticity.com/tv/?rss=1', silent: yes }
      - rss: { url: 'http://torrentz.eu/feed_verified?q=tv', silent: yes }
      - rss: { url: 'http://torrentz.me/feed_verified?q=tv', silent: yes }
      - rss: { url: 'http://www.torlock.com/television/rss.xml', silent: yes }
      - rss: { url: 'http://rss.bt-chat.com/?group=3', silent: yes }
      - rss: { url: 'http://ezrss.it/feed/', silent: yes }
      - rss: { url: 'http://showrss.info/feeds/all.rss', silent: yes }
    log_filter:
      inputs:
        - Unable to download the RSS for task
        - ezrss.it
        - kat.torrenticity.com
      rss:
        - I have saved the invalid content
        - login page

  # All the metainfo plugins used by tasks handling series.
  tvinfo:
    plugin_priority:
      # manipulate must fix the titles before metainfo_series.
      manipulate: 255
    metainfo_series: yes
    thetvdb_lookup: yes
    uoccin_lookup: '{{ secrets.uoccin }}'
    log_filter:
      api_tvdb:
        - using cached data
      manipulate:
        - tvinfo_title
      parser_internal:
        - cannot find a(n) `ep` style identifier
        - cannot find any series numbering
    # Some titles need little corrections to find matches on metainfo sites.
    manipulate:
      # Original title backup
      - title:
          replace:
            regexp: '^\[[^\]]*\][^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^{[^\]]*}[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^\([^\]]*\)[^a-z0-9]*'
            format: ''
      - tvinfo_title:
          from: title
      - title:
          replace:
            regexp: '.*(marvel|marvels|marvel.s)?.agents.of.(s.h.i.e.l.d.|shield)[\b-.]*'
            format: 'marvels_agents_of_shield.'
      - title:
          replace:
            regexp: '.*from.dusk.till.dawn.(the.series)*[\b-.]*'
            format: 'from_dusk_till_dawn.'
      - title:
          replace:
            regexp: '^[^a-z0-9]*house.of.cards.(us|\(us\))?[^a-z0-9]*'
            format: 'House.of.Cards.(US).'
      - title:
          replace:
            regexp: '^[^a-z0-9]*turn:?.(washington(.)?s.spies)?[^a-z0-9]*'
            format: "TURN_Washington_Spies."

  # Global filters for series.
  tvfltr:
    content_size:
      min: 100
      max: 3000
    set:
      allow_teasers: no
      propers: 12 hours
      specials: no
      tracking: backfill

  # Destination path for series in Transmission (requires "transm" template too).
  tvtran:
    transmission:
      path: C:\Storage\Videos\Stage\series

  # The sources for movies torrents.
  mvfeed:
    inputs:
      - rss: { url: 'http://www.torlock.com/movies/rss.xml', silent: yes }
      - rss: { url: 'http://torrentz.eu/feed_verified?q=movies', silent: yes }
    log_filter:
      inputs:
        - Unable to download the RSS for task
      rss:
        - I have saved the invalid content

  # All the metainfo plugins used by tasks handling movies.
  mvinfo:
    plugin_priority:
      # I'm not sure of these priorities too, maybe because of https://github.com/Flexget/Flexget/pull/234 (fixed).
      tmdb_lookup: 128
      rottentomatoes_lookup: 127
    imdb_lookup: yes
    tmdb_lookup: yes
    uoccin_lookup: '{{ secrets.uoccin }}'
    rottentomatoes_lookup: yes

  # Global filters for movies.
  mvfltr:
    content_size:
      min: 800
      max: 10000
    movie_queue: accept
    quality: 1080p

  # Destination path for movies in Transmission (requires transm template too).
  mvtran:
    transmission:
      path: C:\Storage\Videos\Stage\movies

  # Common Transmission settings.
  transm:
    transmission:
      enabled: yes
      port: 9092
      ratio: -1
    log_filter:
      transmissionrpc:
        - Expecting
        - Request
        - HTTP data
    # notify_xmpp:
      # sender: '{{ secrets.xmpp.usr }}'
      # password: '{{ secrets.xmpp.pwd }}'
      # recipient: '{{ secrets.xmpp.dst }}'
      # title: 'Sto scaricando:'
      # text: '{% if imdb_name|default(False) %}Film: {{ imdb_name }}{% elif series_name|default(False) %}Serie: {{ series_name }} {{ series_id }}{% else %}(?) {{ title }}{% endif %}'

  # Subtitles should always follow their video.
  movsrt:
    move:
      along:
        - srt
        - it.srt
        - ita.srt
        - en.srt
        - eng.srt
  copsrt:
    copy:
      along:
        - srt
        - it.srt
        - ita.srt
        - en.srt
        - eng.srt
  delsrt:
    delete:
      clean_source: 50
      along:
        - srt
        - it.srt
        - ita.srt
        - en.srt
        - eng.srt

  # No messages about no input/output/whatever.
  nosumm:
    disable:
      - details

  # Several tasks must not mess up with the seen table...
  noseen:
    disable:
      - seen
      - seen_info_hash
      - seen_movies

  # ...and/or with the backlog.
  nofail:
    disable:
      - backlog
      - remember_rejected
      - retry_failed

tasks:

  # This is the download task for series.
  get_series:
    priority: 3
    template:
      - tvinfo
      - tvfeed
      - tvfltr
      - tvtran
      - transm
    log_filter:
      series:
        - identified_by has locked
      remember_rej:
        - Remembering rejection of
      remember_rejected:
        - Remembering rejection of
    seen: local
    manipulate:
      - title:
          replace:
            regexp: '^[^a-z0-9]*turn:?.(washington(.)?s.spies)?[^a-z0-9]*'
            format: 'Turn '
    sequence:
      - configure_series:
          settings:
            quality: 720p hdtv+
          from:
            uoccin_emit:
              path: '{{ secrets.uoccin }}'
              type: series
              tags: [ 'hires' ]
      - configure_series:
          settings:
            quality: <720p hdtv+
          from:
            uoccin_emit:
              path: '{{ secrets.uoccin }}'
              type: series
              tags: [ 'hires', 'netflix' ]
              check_tags: none
      - configure_series:
          settings:
            quality: webrip
          from:
            uoccin_emit:
              path: '{{ secrets.uoccin }}'
              type: series
              tags: [ 'netflix' ]
    transmission:
      bandwidthpriority: 1

  # This one grabs the pilots.
  premieres:
    priority: 5
    interval: 2 hours
    template:
      - tvfeed
      - tvinfo
      - tvfltr
      - tvtran
      - transm
    # plugin_priority:
      # if: -252
      # manipulate: -253
    log_filter:
      series:
        - identified_by has locked
      remember_rej:
        - Remembering rejection of
      remember_rejected:
        - Remembering rejection of
    seen: local
    require_field:
      - tvdb_id
      - tvdb_genres
      - tvdb_first_air_date
    regexp:
      reject:
        - animation: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - documentary: {from: tvdb_genres}
        - family: {from: tvdb_genres}
        - food: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
        - mini-series: {from: tvdb_genres}
        - musical: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - soap: {from: tvdb_genres}
        - special interest: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
    series_premiere:
      timeframe: 4 hours
      # quality: <720p hdtv+
    torrent_alive:
      min_seeds: 40
    if:
      - uoccin_queued or uoccin_watched or uoccin_collected: reject
      - tvdb_first_air_date and tvdb_first_air_date < now - timedelta(days=60): reject
    # Unknown series are less important.
    transmission:
      bandwidthpriority: -1
    # set_series_begin: yes
    uoccin_queue:
      path: '{{ secrets.uoccin }}'
      tags: [ 'evaluate' ]
    # Send a description to a series-fan channel in a forgotten social network.

  # Import IMDB movies watchlist in Uoccin.
  imdb2uoccin:
    priority: 10
    interval: 4 hours
    # template:
      # - no_global
      # - noseen
      # - nofail
      # - mvinfo
    seen: local
    imdb_list:
      user_id: '{{ secrets.imdb.uid }}'
      list: watchlist
    require_field:
      - imdb_id
      - movie_name
    uoccin_lookup: '{{ secrets.uoccin }}'
    if:
      - uoccin_queued or uoccin_watched or uoccin_collected: reject
    accept_all: yes
    uoccin_queue:
      path: '{{ secrets.uoccin }}'
      tags: [ 'IMDB' ]

  # Import Uoccin watchlist in flexget movie queue.
  watchlist:
    priority: 12
    interval: 1 hours
    # template:
      # - no_global
      # - noseen
      # - nofail
    seen: local
    uoccin_emit:
      path: '{{ secrets.uoccin }}'
      type: movies
    accept_all: yes
    movie_queue: add

  # This is the search & download task for movies.
  get_movies:
    priority: 15
    interval: 2 hours
    template:
      - mvfltr
      - mvtran
      - transm
    log_filter:
      imdb_lookup:
        - lookup failed
      tmdb_lookup:
        - lookup failed
    seen: local
    discover:
      what:
        - emit_movie_queue: { year: no }
      from:
        # - kat:
            # category: movies
            # verified: yes
        - torrentz: verified
      interval: 0 hour
    transmission:
      bandwidthpriority: 0

  # This is a very simple upcoming movies evaluating task, based on IMDB and Rotten Tomatoes public votes.
  guess_movies:
    priority: 20
    interval: 4 hours
    template:
      - noseen
      - nofail
      # - mvinfo
      - mvfeed
      - mvfltr
      - mvtran
      - transm
    log_filter:
      # api_rottentomatoes:
        # - 403 Client Error
      imdb_lookup:
        - lookup failed
      tmdb_lookup:
        - lookup failed
    uoccin_lookup: '{{ secrets.uoccin }}'
    exists_movie:
      - C:\Storage\Videos\Incoming\movies
      - C:\Storage\Videos\Movies
    require_field:
      - imdb_id
      - imdb_name
      - imdb_year
      - imdb_url
      - imdb_languages
      - imdb_genres
      - rt_genres
      # - imdb_votes
      # - imdb_score
      # - rt_releases
      # - rt_critics_score
      # - rt_audience_score
    # regexp:
      # reject:
        # - animation: {from: imdb_genres}
        # - documentary: {from: imdb_genres}
        # - family: {from: imdb_genres}
        # - horror: {from: imdb_genres}
        # - music: {from: imdb_genres}
        # - musical: {from: imdb_genres}
        # - romance: {from: imdb_genres}
        # - sport: {from: imdb_genres}
        # - Faith & Spirituality: {from: rt_genres}
        # - Kids & Family: {from: rt_genres}
        # - Sports & Fitness: {from: rt_genres}
        # - Television: {from: rt_genres}
    if:
      - uoccin_queued or uoccin_watched or uoccin_collected: reject
      # I usually don't like italian movies and I prefer English among all the foreign languages.
      - not imdb_languages or not 'english' in imdb_languages: reject
      # Max 10 years old movies.
      - imdb_year < now.year - 10: reject
    imdb:
      min_votes: 2000
      min_score: 8
      reject_genres:
        - animation
        - documentary
        - family
        - horror
        - music
        - musical
        - romance
        - sport
    rottentomatoes:
      min_critics_score: 80
      min_audience_score: 90
      reject_genres:
        - Faith & Spirituality
        - Kids & Family
        - Sports & Fitness
        - Television
    accept_all: yes
    transmission:
      bandwidthpriority: -1

  # Sometimes, mostly for old stuff, I have to look for episodes in the old way: this task look for torrents in my 
  # g-drive folder for series and send them directly to Transmission.
  dropbox_series:
    priority: 30
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - tvinfo
      - tvtran
      - transm
    find:
      path:
        - C:\Google Drive\torrents\series
      regexp: '.*\.torrent$'
    accept_all: yes
    transmission:
      bandwidthpriority: 1
    exec:
      on_output:
        for_accepted: del "{{ location }}"

  # Same as the prior task, this time for movies.
  dropbox_movies:
    priority: 31
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - mvinfo
      - mvtran
      - transm
    find:
      path:
        - C:\Google Drive\torrents\movies
      regexp: '.*\.torrent$'
    accept_all: yes
    transmission:
      bandwidthpriority: 0
    exec:
      on_output:
        for_accepted: del "{{ location }}"

  # Move episodes from Transmission destination folder to the incoming folder.
  move_series:
    priority: 40
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - tvinfo
      - copsrt
    log_filter:
      transmissionrpc:
        - Expecting
        - Request
        - HTTP data
      crossmatch:
        - Input find did not return anything
    # We get the entries from Transmission because we need the torrent title, because in some multi-file torrents the 
    # actual video filename is completely different, up to make the lookup on metainfo sites impossible.
    from_transmission:
      enabled: yes
      port: 9092
      onlycomplete: no
    # Accept only files in series' Transmission destination path (tasks get_series, premieres, dropox_series).
    crossmatch:
      from:
        - find:
            path:
              - C:\Storage\Videos\Stage\series
            regexp: '.*\.(avi|mkv|mp4)$'
            recursive: yes
      fields:
        - location
      action: accept
    exists_series:
      path: "C:\\Storage\\Videos\\Incoming\\series"
      allow_different_qualities: better
    if:
      - uoccin_collected or uoccin_watched: reject
    # Copy accepted files in the incoming path (filename will be the original title since manipulate in tvinfo might 
    # have modified it).
    copy:
      to: "C:\\Storage\\Videos\\Incoming\\series\\{{ tvdb_series_name|default(series_name) }}\\"
      filename: "{{ tvinfo_title }}{% if not location|pathext in tvinfo_title %}{{ location|pathext }}{% endif %}"
    # Add to Uoccin episodes collection.
    uoccin_acquire: '{{ secrets.uoccin }}'

  # Move movies from Transmission destination folder to the incoming folder.
  move_movies:
    priority: 41
    template:
      - no_global
      - noseen
      - nosumm
      - nofail
      - mvinfo
      - copsrt
    log_filter:
      transmissionrpc:
        - Expecting
        - Request
        - HTTP data
      crossmatch:
        - Input find did not return anything
      imdb_lookup:
        - lookup failed
      tmdb_lookup:
        - lookup failed
    # We get the entries from Transmission because we need the torrent title, because in some multi-file torrents the 
    # actual video filename is completely different, up to make the lookup on metainfo sites impossible.
    from_transmission:
      enabled: yes
      port: 9092
      onlycomplete: no
    # Accept only files in movies' Transmission destination path (tasks get_movies, dropox_movies).
    crossmatch:
      from:
        - find:
            path:
              - C:\Storage\Videos\Stage\movies
            regexp: '.*\.(avi|mkv|mp4)$'
            recursive: yes
      fields:
        - location
      action: accept
    if:
      - uoccin_watched or uoccin_collected: reject
    # Copy accepted files in the incoming path (filename will be the original torrent name, see move_series).
    copy:
      to: "C:\\Storage\\Videos\\Incoming\\movies\\{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})\\"
      filename: "{{ title }}{% if not location|pathext in title %}{{ location|pathext }}{% endif %}"
    # Update Uoccin movies collection/watchlist.
    uoccin_acquire: '{{ secrets.uoccin }}'
    uoccin_unqueue: '{{ secrets.uoccin }}'

  # Clean Transmission of completed torrents.
  cleantran:
    priority: 45
    template:
      - noseen
      - nosumm
      - nofail
    log_filter:
      transmissionrpc:
        - Expecting
        - Request
        - HTTP data
      task:
        - you should add (at least) one!
    clean_transmission:
      enabled: yes
      port: 9092
      finished_for: 48 hours
      delete_files: yes

  # Download italian and english subtitles for all the videos.
  subtitles:
    priority: 60
    # manual: yes
    template:
      - noseen
      - nosumm
      - nofail
    plugin_priority:
      subliminal: -200
      uoccin_acquire: -201
    log_filter:
      entry:
        - subtitles for now
        - found for a second-choice
      guessit.guess:
        - duplicate properties
        - both guesses to be merged
      subtitles:
        - Name computed for
    find:
      path:
        - C:\Storage\Videos\Incoming
        # - C:\Storage\Videos\Incoming\series\New Girl
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    subliminal:
      languages:
        - ita
      alternatives:
        - eng
    # Updates the Uoccin collection with subs data.
    uoccin_acquire: '{{ secrets.uoccin }}'
    # I often see wrong accented characters in italian subs (I think it's something about text files encoding on Macs).
    # This plugin should address most of the issues - see https://github.com/tarzasai/.flexget/tree/master/plugins
    fix_subtitles: yes

  updu4subs:
    # priority: 62
    manual: yes
    template:
      - noseen
      - nosumm
      - nofail
    metainfo_series: yes
    thetvdb_lookup: yes
    imdb_lookup: yes
    check_subtitles: yes
    find:
      path:
        - C:\Storage\Videos\Incoming
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - subtitles: accept
    uoccin_acquire: '{{ secrets.uoccin }}'

  # Move watched episodes out of the incoming folder.
  purge_series:
    priority: 70
    template:
      - no_global
      - noseen
      - nosumm
      - tvinfo
      # - delsrt
      - movsrt
    find:
      path:
        - C:\Storage\Videos\Incoming\series
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - uoccin_watched: accept
    move:
      to: "C:\\Storage\\Videos\\Series\\{{ tvdb_series_name|default(series_name) }}\\Season {{ series_season }}\\"
      clean_source: 10
    uoccin_forget: '{{ secrets.uoccin }}'
    # Eventually restore the incoming series folder (otherwise Flexget will not run next time).
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Storage\Videos\Incoming\series

  # Delete watched movies.
  purge_movies:
    priority: 71
    template:
      - no_global
      - noseen
      - nosumm
      - mvinfo
      - delsrt
    find:
      path:
        - C:\Storage\Videos\Incoming\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - uoccin_watched and uoccin_rating < 8: accept
    uoccin_forget: '{{ secrets.uoccin }}'
    # Eventually restore the incoming movies folder (otherwise Flexget will not run next time).
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Storage\Videos\Incoming\movies

  # Save watched movies (the very good ones).
  save_movies:
    priority: 72
    template:
      - no_global
      - noseen
      - nosumm
      - mvinfo
      - movsrt
    find:
      path:
        - C:\Storage\Videos\Incoming\movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    if:
      - uoccin_watched and uoccin_rating >= 8: accept
    move:
      to: "C:\\Storage\\Videos\\Movies\\{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})\\"
      clean_source: 10
    uoccin_forget: '{{ secrets.uoccin }}'
    # Eventually restore the incoming movies folder (otherwise Flexget will not run next time).
    exec:
      allow_background: yes
      on_exit:
        phase: md C:\Storage\Videos\Incoming\movies

  ######################################################################################################################
  # NEWS & PODCASTS
  # the following tasks have nothing to do with series and movies, it's just me using Flexget as a push notification 
  # system to get some updates on my phone :P
  ######################################################################################################################

  _events:
    priority: 200
    # interval: 50 minutes
    template:
      - no_global
    log_filter:
      details:
        - Task didn't produce any entries.
    seen: local
    # This plugin emits entries about the latest events logged in the specified Windows registry (Application in this 
    # task) - see https://github.com/tarzasai/.flexget/tree/master/plugins
    winevents:
      filename: c:\windows\sysnative\winevt\logs\Application.evtx
      providers:
        - APC UPS Service:
            short: UPS
            events:
              - 61452: Test automatico riuscito
              - 61453: Sistema alimentato a batteria per disturbo elettrico
              - 173: Sistema alimentato a batteria per sottotensione
              - 174: Sistema alimentato a batteria per blackout
              - 61455: Alimentazione ripristinata a corrente di rete
              - 61456: PowerChute non comunica con la batteria di backup
              - 61465: PowerChute comunica di nuovo con la batteria di backup
              - 176: PowerChute ha spento il sistema
    accept_all: yes
    # friendfeed:
      # app_key: '{{ secrets.ff.key }}'
      # app_secret: '{{ secrets.ff.sec }}'
      # username: '{{ secrets.ff.usr }}'
      # password: '{{ secrets.ff.pwd }}'
      # feeds: [esorfeeds]
      # text: "[Eventi di sistema] {{ event_time.strftime('%H:%M:%S') }} - {{ short_name }}: {{ event_text }}"

  _Podcasts:
    priority: 300
    interval: 12 hours
    template:
      - no_global
      # - ffeeds
    inputs:
      - rss: { url: 'http://www.macchianera.net/podcast.xml', silent: yes, all_entries: no }

  _Imogen Heap:
    priority: 301
    interval: 12 hours
    template:
      - no_global
      # - ffeeds
    inputs:
      - rss: { url: 'https://twitrss.me/twitter_user_to_rss/?user=imogenheap', silent: yes, all_entries: no }

  _Macchianera:
    priority: 302
    interval: 12 hours
    template:
      - no_global
      # - ffeeds
    inputs:
      - rss: { url: 'http://feeds.feedburner.com/Macchianera', silent: yes, all_entries: no }

  _Dilbert:
    priority: 303
    interval: 12 hours
    template:
      - no_global
    inputs:
      - rss: { url: 'http://feed.dilbert.com/dilbert/daily_strip', silent: yes, all_entries: no }
    # This plugin gets a direct link to the picture - see https://github.com/tarzasai/.flexget/tree/master/plugins
    dilbert_strip: yes
    # friendfeed:
      # app_key: '{{ secrets.ff.key }}'
      # app_secret: '{{ secrets.ff.sec }}'
      # username: '{{ secrets.ff.usr }}'
      # password: '{{ secrets.ff.pwd }}'
      # feeds: [esorfeeds]
      # link: "{{ url }}"
      # text: "{{ strip_title }}"
      # image: "{{ strip_url }}"

  _Zerocalcare:
    priority: 304
    interval: 12 hours
    template:
      - no_global
      # - ffeeds
    inputs:
      - rss: { url: 'http://feeds.feedburner.com/Zerocalcareit?format=xml', silent: yes, all_entries: no }

  _Romantically Apocalyptic:
    priority: 305
    interval: 1 days
    template:
      - no_global
      # - ffeeds
    inputs:
      - rss: { url: 'http://feeds.feedburner.com/zeefeed?format=xml', silent: yes, all_entries: no }

  _tvrenewed:
    priority: 400
    interval: 7 days
    template:
      - tvinfo
    # This plugin grabs the latest news about series renewal/cancellation on TVRage - see 
    # https://github.com/tarzasai/.flexget/tree/master/plugins
    tvrage_rencans:
      pages: 3
      context: renewed
    if:
      - tvrage_date >= now - timedelta(days=8): accept
    require_field:
      - tvdb_id
      - tvdb_genres
    regexp:
      reject:
        - animation: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - documentary: {from: tvdb_genres}
        - family: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
        - musical: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - soap: {from: tvdb_genres}
        - special interest: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
    # friendfeed:
      # app_key: '{{ secrets.ff.key }}'
      # app_secret: '{{ secrets.ff.sec }}'
      # username: '{{ secrets.ff.usr }}'
      # password: '{{ secrets.ff.pwd }}'
      # feeds: [me, serietv]
      # mode: comments
      # text: "TVRage weekly #rencans: serie confermate/rinnovate"
      # link: 'http://www.tvrage.com/status_update.php'
      # comment: "{{ tvdb_series_name|default(series_name) }}"

  _tvcanceled:
    priority: 401
    interval: 7 days
    template:
      - tvinfo
    # This plugin grabs the latest news about series renewal/cancellation on TVRage - see 
    # https://github.com/tarzasai/.flexget/tree/master/plugins
    tvrage_rencans:
      pages: 3
      context: canceled
    if:
      - tvrage_date >= now - timedelta(days=8): accept
    require_field:
      - tvdb_id
      - tvdb_genres
    regexp:
      reject:
        - animation: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - documentary: {from: tvdb_genres}
        - family: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
        - musical: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - soap: {from: tvdb_genres}
        - special interest: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
    # friendfeed:
      # app_key: '{{ secrets.ff.key }}'
      # app_secret: '{{ secrets.ff.sec }}'
      # username: '{{ secrets.ff.usr }}'
      # password: '{{ secrets.ff.pwd }}'
      # feeds: [me, serietv]
      # mode: comments
      # text: "TVRage weekly #rencans: serie CANCELLATE"
      # link: 'http://www.tvrage.com/status_update.php'
      # comment: "{{ tvdb_series_name|default(series_name) }}"

  fix_episodes:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - tvinfo
    episodes_list: yes
    # episodes_list: 'dreadful'
    if:
      - series_season == 1 and series_episode == 1: reject
      - not tvdb_id: accept
      - not tvdb_ep_air_date or tvdb_ep_air_date > now - timedelta(days=1): accept
    forget_episodes: yes

  d2uc:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - mvinfo
    disable:
      - urlrewriter
      - urlrewrite_redirect
      - tmdb_lookup
      - rottentomatoes_lookup
    log_filter:
      urlrewriter:
        - URL rewritten to
    find:
      path:
        - C:\Storage\Videos\Incoming\movies
        - C:\Storage\Videos\Movies
      regexp: '.*\.(avi|mkv|mp4)$'
      recursive: yes
    accept_all: yes
    uoccin_acquire: '{{ secrets.uoccin }}'

  t2um:
    manual: yes
    template:
      - no_global
      - noseen
      - nofail
      - mvinfo
    disable:
      - urlrewriter
      - urlrewrite_redirect
      - tmdb_lookup
      - rottentomatoes_lookup
    log_filter:
      urlrewriter:
        - URL rewritten to
    trakt_list:
      username: '{{ secrets.trakt.usr }}'
      password: '{{ secrets.trakt.pwd }}'
      list: watched
      type: movies
    accept_all: yes
    uoccin_watched: '{{ secrets.uoccin }}'
